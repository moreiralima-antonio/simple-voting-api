openapi: 3.0.0

info:
  title: Simple Voting API
  version: 0.3.0
  description: 'API designed for manage voting sessions and generate the voting results for a proposal.'
servers:
  - url: http://localhost:8080/api/v0.3.0
tags:
  - name: Voting API
paths:
  /proposals:
    post:
      description: 'Create a new proposal'
      tags:
        - Voting API
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/proposalsRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proposalsResponse'
  /proposals/{id}/sessions:
    post:
      description: 'Open a session based on a proposal id'
      tags:
        - Voting API
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sessionsRequest'
        required: true
      responses:
        '201':
          description: Created
  /proposals/{id}/votes:
    post:
      description: 'Register a new vote in a proposal'
      tags:
        - Voting API
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/votesRequest'
        required: true
      responses:
        '201':
          description: Created
  /proposals/{id}/results:
    get:
      description: 'Obtain the results of a voting session'
      tags:
        - Voting API
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultsResponse'
components:
  schemas:
    proposalsRequest:
      properties:
        description:
          type: string
      required:
        - description
      type: object
    proposalsResponse:
      properties:
        id:
          type: string
          format: uuid
      required:
        - id
    sessionsRequest:
      properties:
        timeout:
          type: integer
      type: object
    votesRequest:
      properties:
        memberId:
          type: string
        choice:
          enum:
            - yes
            - no
          type: string
      required:
        - memberId
        - choice
      type: object
    resultsResponse:
      properties:
          yes:
            type: integer
          no:
            type: integer
      type: object
